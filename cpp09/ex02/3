#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include <iterator>
#include <ctime>

using namespace std;

// Merge-insert sort algorithm implementation
template<typename Iterator>
void mergeInsertSort(Iterator begin, Iterator end) {
    if (begin == end) return;
    for (Iterator i = begin + 1; i != end; ++i) {
        typename iterator_traits<Iterator>::value_type value = *i;
        Iterator j = i - 1;
        while (j >= begin && *j > value) {
            *(j + 1) = *j;
            --j;
        }
        *(j + 1) = value;
    }
}

int main(int argc, char* argv[]) {
    // Check if there is at least one argument
    if (argc < 2) {
        cerr << "Error: No argument provided" << endl;
        return 1;
    }

    // Convert command-line arguments to a vector of integers
    vector<int> numbers;
    for (int i = 1; i < argc; ++i) {
        int number = atoi(argv[i]);
        if (number > 0) {
            numbers.push_back(number);
        } else {
            cerr << "Error: Invalid argument (" << argv[i] << ")" << endl;
            return 1;
        }
    }

    // Display the unsorted sequence
    cout << "Before:";
    copy(numbers.begin(), numbers.end(), ostream_iterator<int>(cout, " "));
    cout << endl;

    // Sort the sequence using a list and measure the time
    list<int> numbersList(numbers.begin(), numbers.end());
    clock_t beginTime1 = clock();
    mergeInsertSort(numbersList.begin(), numbersList.end());
    clock_t endTime1 = clock();
    double elapsedTime1 = double(endTime1 - beginTime1) / CLOCKS_PER_SEC;

    // Display the sorted sequence and the time used with a list
    cout << "After:";
    copy(numbersList.begin(), numbersList.end(), ostream_iterator<int>(cout, " "));
    cout << endl;
    cout << "Time to process a range of " << numbersList.size() << " elements with a list: "
         << elapsedTime1 << " seconds" << endl;

    // Sort the sequence using a vector and measure the time
    vector<int> numbersVector(numbers.begin(), numbers.end());
    clock_t beginTime2 = clock();
    mergeInsertSort(numbersVector.begin(), numbersVector.end());
    clock_t endTime2 = clock();
    double elapsedTime2 = double(endTime2 - beginTime2) / CLOCKS_PER_SEC;

    // Display the sorted sequence and the time used with a vector
    cout << "After:";
    copy(numbersVector.begin(), numbersVector.end(), ostream_iterator<int>(cout, " "));
    cout << endl;
    cout << "Time to process a range of " << numbersVector.size() << " elements with a vector: "
         << elapsedTime2 << " seconds" << endl;

    return 0;
}